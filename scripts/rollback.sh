#!/bin/bash
# rollback.sh - Script para hacer rollback a una versi√≥n anterior del plugin

# Importar configuraci√≥n compartida
DEPLOY_TOOLS_DIR="$(dirname "$(dirname "$0")")"
source "$DEPLOY_TOOLS_DIR/scripts/sync_config.sh"

# Verificar requisitos
check_requirements

# Directorio del plugin
PLUGIN_DIR="wp-content/plugins/avalon-ttamayo"

# Verificar si se proporcion√≥ una versi√≥n
VERSION=$1

if [ -z "$VERSION" ]; then
  echo "‚ÑπÔ∏è No se especific√≥ versi√≥n. Listando las 5 √∫ltimas versiones disponibles:"
  git tag -l --sort=-v:refname | head -5
  echo ""
  echo "Uso: ./rollback.sh v1.2.3"
  exit 1
fi

# Verificar si el tag existe
if ! git tag -l | grep -q "^$VERSION$"; then
  echo "‚ùå Error: La versi√≥n '$VERSION' no existe."
  echo "Versiones disponibles:"
  git tag -l --sort=-v:refname | head -10
  exit 1
fi

# Crear un directorio temporal
TEMP_DIR=$(mktemp -d)
echo "üì¶ Creando despliegue de rollback para versi√≥n $VERSION..."

# Clonar el repositorio en el directorio temporal
git clone -q . "$TEMP_DIR" || { echo "‚ùå Error al clonar el repositorio local"; rm -rf "$TEMP_DIR"; exit 1; }

# Cambiar al directorio temporal y verificar la versi√≥n
cd "$TEMP_DIR" || { echo "‚ùå Error al acceder al directorio temporal"; rm -rf "$TEMP_DIR"; exit 1; }
git checkout -q "$VERSION" || { echo "‚ùå Error al hacer checkout de la versi√≥n $VERSION"; cd - > /dev/null; rm -rf "$TEMP_DIR"; exit 1; }

# Verificar que existe el directorio del plugin en la versi√≥n
if [ ! -d "$PLUGIN_DIR" ]; then
  echo "‚ùå Error: El directorio del plugin no existe en la versi√≥n $VERSION."
  cd - > /dev/null
  rm -rf "$TEMP_DIR"
  exit 1
fi

# Preguntar confirmaci√≥n
echo "‚ö†Ô∏è Se realizar√° un rollback del plugin 'avalon-ttamayo' a la versi√≥n $VERSION."
echo "   Esta acci√≥n reemplazar√° la versi√≥n actual en el servidor remoto."
read -p "¬øDesea continuar? (s/n): " CONFIRM

if [[ "$CONFIRM" != "s" && "$CONFIRM" != "S" ]]; then
  echo "‚ùå Operaci√≥n cancelada por el usuario."
  cd - > /dev/null
  rm -rf "$TEMP_DIR"
  exit 1
fi

# Crear un paquete del plugin
echo "üì¶ Creando paquete del plugin versi√≥n $VERSION..."
cd "$PLUGIN_DIR" || { echo "‚ùå Error al acceder al directorio del plugin"; cd - > /dev/null; rm -rf "$TEMP_DIR"; exit 1; }
zip -r -q "$TEMP_DIR/avalon-ttamayo-$VERSION.zip" .

# Volver al directorio original
cd - > /dev/null

# Subir el paquete al servidor
echo "üì§ Subiendo paquete al servidor..."
scp "$TEMP_DIR/avalon-ttamayo-$VERSION.zip" "$REMOTE_SSH:$REMOTE_PATH/" || { echo "‚ùå Error al subir el paquete al servidor"; rm -rf "$TEMP_DIR"; exit 1; }

# Ejecutar comandos en el servidor remoto
echo "üîÑ Aplicando rollback en el servidor remoto..."
ssh "$REMOTE_SSH" "cd $REMOTE_PATH && \
  echo 'üîç Haciendo backup de la versi√≥n actual...' && \
  if [ -d '$PLUGIN_DIR' ]; then \
    mv '$PLUGIN_DIR' '${PLUGIN_DIR}_backup_$(date +%Y%m%d_%H%M%S)'; \
  fi && \
  echo 'üì¶ Extrayendo versi√≥n $VERSION...' && \
  mkdir -p '$PLUGIN_DIR' && \
  unzip -q avalon-ttamayo-$VERSION.zip -d '$PLUGIN_DIR' && \
  echo 'üßπ Limpiando archivos temporales...' && \
  rm avalon-ttamayo-$VERSION.zip && \
  echo '‚úÖ Rollback completado con √©xito.'" || { echo "‚ùå Error al aplicar el rollback en el servidor"; rm -rf "$TEMP_DIR"; exit 1; }

# Limpiar directorio temporal
rm -rf "$TEMP_DIR"

echo "üéâ Rollback a la versi√≥n $VERSION completado exitosamente."
echo "   La versi√≥n anterior ha sido respaldada en el servidor como ${PLUGIN_DIR}_backup_*" 