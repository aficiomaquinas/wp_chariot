#!/bin/bash

# Script para an√°lisis avanzado de cambios locales

# Importar configuraci√≥n compartida
DEPLOY_TOOLS_DIR="$(dirname "$(dirname "$0")")"
source "$DEPLOY_TOOLS_DIR/scripts/sync_config.sh"

# Funci√≥n para obtener archivos modificados usando git
get_modified_files_git() {
  echo "Detectando cambios usando Git..."
  echo ""
  
  # Cambiar al directorio de destino
  cd "$DEST" || return 1
  
  # Verificar si hay cambios sin confirmar
  if git status --porcelain | grep -q "^.M"; then
    echo "Archivos modificados seg√∫n Git:"
    echo "------------------------------"
    git status --porcelain | grep "^.M" | awk '{print $2}'
    
    echo ""
    echo "Mostrando diferencias de los archivos modificados:"
    echo "------------------------------------------------"
    
    # Recorrer cada archivo modificado y mostrar el diff
    git status --porcelain | grep "^.M" | awk '{print $2}' | while read -r file; do
      echo ""
      echo "üìÑ $file:"
      echo "----------------"
      git diff -- "$file" | head -n 30  # Mostrar solo las primeras 30 l√≠neas del diff
      echo ""
      echo "(Mostrados solo los primeros cambios, usa 'git diff -- $file' para ver completo)"
      echo "----------------"
    done
  else
    echo "No se detectaron archivos modificados en el repositorio Git."
  fi
}

# Funci√≥n para obtener archivos modificados bas√°ndose en timestamps
get_modified_files_timestamp() {
  echo "Detectando cambios usando timestamps (esto puede ser menos preciso)..."
  echo ""
  
  # Crear un archivo temporal para las reglas
  local exclude_file=$(create_rules_file)
  
  # Buscar archivos modificados en las √∫ltimas 24 horas
  echo "Archivos modificados en las √∫ltimas 24 horas:"
  echo "-------------------------------------------"
  find "$DEST" -type f -mtime -1 | while read -r file; do
    # Verificar si el archivo debe ser excluido
    exclude=false
    rel_path="${file#$DEST}"
    
    for key in "${!EXCLUSIONS[@]}"; do
      pattern=${EXCLUSIONS[$key]}
      if [[ "$rel_path" == $pattern ]] || [[ "$rel_path" == */$pattern ]] || [[ "$rel_path" == */$pattern/* ]]; then
        exclude=true
        break
      fi
    done
    
    if [ "$exclude" = false ]; then
      echo "$rel_path"
    fi
  done
  
  # Limpiar
  rm -f "$exclude_file"
}

# Funci√≥n para buscar espec√≠ficamente archivos de c√≥digo PHP modificados
find_code_files() {
  echo ""
  echo "Buscando archivos de c√≥digo significativos modificados..."
  echo ""
  
  # Patrones de archivos importantes
  local important_patterns=(
    "wp-content/plugins/avalon-ttamayo/**/*.php"
    "wp-content/themes/avalon/**/*.php"
    "wp-content/plugins/avalon-ttamayo/**/*.js"
    "wp-content/themes/avalon/**/*.js"
    "wp-content/mu-plugins/**/*.php"
    "wp-config*.php"
  )
  
  if is_git_repo; then
    # Usar git para encontrar archivos importantes
    cd "$DEST" || return 1
    
    for pattern in "${important_patterns[@]}"; do
      echo "üìÅ Buscando archivos modificados que coincidan con: $pattern"
      git status --porcelain | grep "^.M" | awk '{print $2}' | grep -E "$pattern" || echo "  Ninguno encontrado"
      echo ""
    done
  else
    # Usar find para encontrar archivos importantes
    for pattern in "${important_patterns[@]}"; do
      echo "üìÅ Buscando archivos modificados en las √∫ltimas 72 horas que coincidan con: $pattern"
      find "$DEST" -path "$DEST/$pattern" -type f -mtime -3 || echo "  Ninguno encontrado"
      echo ""
    done
  fi
}

# Funci√≥n para encontrar elementos personalizados espec√≠ficos de inter√©s 
find_custom_elements() {
  echo ""
  echo "Buscando elementos personalizados de inter√©s..."
  echo ""
  
  # Lista de directorios/archivos personalizados a revisar
  local custom_elements=(
    "wp-content/plugins/avalon-ttamayo"
    "wp-content/mu-plugins"
    "wp-content/themes/avalon-child"
  )
  
  for element in "${custom_elements[@]}"; do
    if [ -e "$DEST/$element" ]; then
      echo "üìÇ Elemento personalizado encontrado: $element"
      
      # Si es un directorio, mostrar archivo m√°s reciente
      if [ -d "$DEST/$element" ]; then
        echo "   Archivos modificados recientemente:"
        find "$DEST/$element" -type f -mtime -7 | sort -r | head -5 
      fi
      echo ""
    fi
  done
}

# Men√∫ principal
echo "üîç An√°lisis de cambios locales"
echo "-----------------------------"
echo "1) Analizar cambios usando Git (si est√° disponible)"
echo "2) Analizar cambios usando timestamps de archivos"
echo "3) Buscar archivos de c√≥digo importantes modificados"
echo "4) Buscar elementos personalizados de inter√©s"
echo "5) Realizar todos los an√°lisis"
echo "0) Salir"
echo ""
read -p "Seleccione una opci√≥n [0-5]: " option

case $option in
  1)
    if is_git_repo; then
      get_modified_files_git
    else
      echo "‚ùå No se detect√≥ un repositorio Git en $DEST"
      echo "   Usando m√©todo alternativo basado en timestamps..."
      get_modified_files_timestamp
    fi
    ;;
  2)
    get_modified_files_timestamp
    ;;
  3)
    find_code_files
    ;;
  4)
    find_custom_elements
    ;;
  5)
    if is_git_repo; then
      get_modified_files_git
    else
      get_modified_files_timestamp
    fi
    find_code_files
    find_custom_elements
    ;;
  0)
    echo "Saliendo..."
    exit 0
    ;;
  *)
    echo "Opci√≥n inv√°lida. Saliendo..."
    exit 1
    ;;
esac

echo "üéâ Proceso completado exitosamente!" 